# -*- coding: utf-8 -*-
"""Data Science for Business - Project 1 - HR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H4O2gv5S0vXi46h0bO_WWuLX22pIjcfu

# Task 1: Understanding the problem

# Task 2: Import libraries and Datasets
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()


from sklearn.preprocessing import OneHotEncoder # To encoding categorical data
from sklearn.preprocessing import MinMaxScaler # To scale input data

"""Configure options of the libraries"""

pd.set_option('display.max_columns', None)

df = pd.read_csv('https://raw.githubusercontent.com/ingcastaleo/Business-Data-Science/main/Human_Resources.csv') # Importing dataset
df.describe() # Gain insigts on the dataset

df.head()

df.info() # Gain insigts on the dataset datatype

mean_age = df.describe()['Age'][1]
print(f'The mean age is { mean_age } years')

"""#Task 3: Visualize the data"""

df['Attrition'] = df['Attrition'].apply(lambda x:1 if x == 'Yes' else 0)
df['OverTime'] = df['OverTime'].apply(lambda x:1 if x == 'Yes' else 0)
df['Over18'] = df['Over18'].apply(lambda x:1 if x == 'Y' else 0)
df.head()

"""Check out for missing data"""

sns.heatmap(df.isnull(),yticklabels = False, cbar = False, cmap = 'Blues')
print('There is no missing data')

"""Study the data statistics"""

df.hist(bins=30, figsize=(20,20),color='b')

"""
*   There is a note-worthy approx 250 employees that have resigned. This is a savings opportunity.

*   The Monthly Income and Percent Hike is highly tailed.



* There are no changing features that do not add value: Employee Count, Over18 and Standard Hours"""

df = df.drop(['EmployeeCount','Over18','StandardHours'], axis = 1)

"""Employees that left the company"""

left_df = df[df['Attrition']==1]
left_df = left_df.reset_index(drop=True)

stay_df = df[df['Attrition']==0]
stay_df = stay_df.reset_index(drop=True)

res_emp = left_df.shape[0]
act_emp = stay_df.shape[0]
Tot_emp = df.shape[0]

res_emp_perc = res_emp / Tot_emp * 100
act_emp_perc = act_emp / Tot_emp * 100

print(f'The total employees in the report is {Tot_emp}')
print(f'The total resigning employees are {res_emp}')
print(f'The total staying employees are {act_emp}')
print(f'The percentage of resigning employees is {res_emp_perc:0.2f}%')
print(f'The percentage of staying employees is {act_emp_perc:0.2f}%')

left_df.describe()

left_df.hist(bins=30, figsize=(20,20),color='r')

stay_df.hist(bins=30, figsize=(20,20),color='g')

"""Check correlations between the variables"""

correlations = df.corr()
f, ax = plt.subplots(figsize = (20,20))
sns.heatmap(correlations, annot = True)

"""

There are strong positive correlations sparse throughout the dataset

*   Total Working Years  vs Job level
*   Total Working Years  vs Monthly Income
*   Total Working Years  vs Age"""

plt.figure(figsize = [25,12])
sns.countplot(x = 'Age', hue = 'Attrition', data = df)

"""Employees around 20 years old, are more proclive to leave the company
There is a strong variability of the Attrition vs the Age.
"""

plt.figure(figsize=[20,20])

plt.subplot(411)
sns.countplot(x = 'JobRole', hue = 'Attrition', data = df)

plt.subplot(412)
sns.countplot(x = 'MaritalStatus', hue = 'Attrition', data = df)

plt.subplot(413)
sns.countplot(x = 'JobInvolvement', hue = 'Attrition', data = df)

plt.subplot(414)
sns.countplot(x = 'JobLevel', hue = 'Attrition', data = df)

"""* The sales department has the larger ratio of resigns.
* Single employees tend to leave the company more than others.
* The more Job Involvement the less probable to have resigns
* The smaller the Job level, the larger the probability of leaving the company

## KDE (Kernel Density Estimate) graphs

KDE describes the probability density at different values in a continuous variable
"""

fig = plt.figure(figsize=(12,2))

sns.kdeplot(stay_df['DistanceFromHome'], label = 'Employees who stayed', fill = True, color = 'b')
sns.kdeplot(left_df['DistanceFromHome'], label = 'Employees who left', fill = True, color = 'r')

fig = plt.figure(figsize=(12,2))

sns.kdeplot(stay_df['YearsWithCurrManager'], label = 'Employees who stayed', fill = True, color = 'b')
sns.kdeplot(left_df['YearsWithCurrManager'], label = 'Employees who left', fill = True, color = 'r')

fig = plt.figure(figsize=(12,2))

sns.kdeplot(stay_df['TotalWorkingYears'], label = 'Employees who stayed', fill = True, color = 'b')
sns.kdeplot(left_df['TotalWorkingYears'], label = 'Employees who left', fill = True, color = 'r')

"""* The Distance from home is correlated with resignations after 10 miles
* The employees that have been less than 2 years with a manager are proner to leave the company
* The employees that has been less than 5 years in the company are proner to leave

## Boxplot graphs
"""

sns.boxplot(x = 'MonthlyIncome', y = 'Gender', data = df )

plt.figure(figsize = (10,10))
sns.boxplot(x = 'MonthlyIncome', y = 'JobRole', data = df )

"""# Task 4: Create testing and trainig datasets & Data cleansing

Separate Categorical data from Numerical data
"""

g = df.columns.to_series().groupby(df.dtypes).groups
print(g)
gkey = list(g.keys())
num_cols = list(g.get(gkey[0]))
cat_cols = list(g.get(gkey[1]))

X_num = df[num_cols]  # Dataframe with all numerical data
X_cat = df[cat_cols]  # Dataframe with all categorical data to be encoded

print(X_num.shape)
print(X_cat.shape)

one_hot_encoder = OneHotEncoder()
X_cat = one_hot_encoder.fit_transform(X_cat).toarray()
X_cat

X_cat = pd.DataFrame(X_cat)
X_cat.columns = X_cat.columns.astype(str)
X_cat

X_all = pd.concat([X_cat,X_num],axis = 1)
X_all

scaler = MinMaxScaler()
X = scaler.fit_transform(X_all)
X

y = df['Attrition']
y

"""# Task 8: Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier